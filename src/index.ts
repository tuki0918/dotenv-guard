import { Project } from "ts-morph";
import type { ZodSchema, z } from "zod";

export const generateEnvTypes = (
	schema: z.ZodTypeAny,
	outputPath = "./types/env.d.ts",
) => {
	// Parse schema and generate type definitions
	const shape = schema._def.shape();
	// environment variable key names
	const keys = Object.keys(shape);

	const fields = keys.map((key) => {
		let field = shape[key];
		const isOptional = field._def.typeName === "ZodOptional";
		let typeName = isOptional
			? field._def.innerType._def.typeName
			: field._def.typeName;

		// Handle ZodEffects
		if (typeName === "ZodEffects") {
			field = field._def.schema;
			typeName = field._def.typeName;
		}

		// TODO: Handle more Zod types

		let type: string;
		switch (typeName) {
			case "ZodBoolean":
				type = "boolean";
				break;
			case "ZodString":
				type = "string";
				break;
			case "ZodNumber":
				type = "number";
				break;
			case "ZodEnum":
				type = `"${field._def.values.join('" | "')}"`;
				break;
			default:
				type = "unknown";
		}

		return `${key}${isOptional ? "?" : ""}: ${type};`;
	});

	// Create type definition file
	const project = new Project();
	const file = project.createSourceFile(outputPath, "", { overwrite: true });
	file.addStatements([
		"/** Generated by dotenv-guard */",
		"declare namespace NodeJS {",
		"  export interface ProcessEnv {",
		...fields.map((field) => `    ${field}`),
		"  }",
		"}",
	]);
	project.saveSync();
};

// Function to validate environment variables
export function validateEnv<T extends ZodSchema>(
	schema: T,
	env: NodeJS.ProcessEnv = process.env,
): z.infer<T> {
	const result = schema.safeParse(env);
	if (!result.success) {
		console.error(
			"Environment variable validation failed:",
			result.error.format(),
		);
		throw new Error("Invalid environment variables");
	}
	return result.data;
}
